fit_null <- stan(modelFile_null,
data = dataList_null,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
fit_alt <- stan(modelFile_alt,
data = dataList_alt,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
cat("Finishing model simulation")
endTime = Sys.time(); print(endTime)
print("It took", endTime - startTime)
'
model_1   <- stan_model(modelFile_null)
fit_1   <- sampling(object = model_2, data = dataList_null, control = list(adapt_delta = 0.99))
marglik_1 <- bridge_sampler(fit_2)
model_2   <- stan_model(modelFile_alt)
fit_2     <- sampling(object = model_2, data = dataList_alt, control = list(adapt_delta = 0.99))
marglik_2 <- bridge_sampler(fit_2)
'
bridge_H0 <- bridge_sampler(fit_null)
bridge_H1 <- bridge_sampler(fit_alt)
print(bf(bridge_H0, bridge_H1))
'
cat('bayes factor', exp(marglik_2$logml - marglik_1$logml))
# Author: Kaleem Ullah
# Simulated Data
library(rstan)
library(bridgesampling)
rstan_options(auto_write=TRUE)
options(mc.cores=4)
modelFile_null <- 'stan_null.stan'
modelFile_alt <- 'stan_alt.stan'
nIter <- 2000
nChains <- 4
nWarmup <- floor(nIter/2)
nThin <- 1
sample_size = 100000
cat("Estimating", modelFile, "model...\n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulation in Stan...\n")
n = sum(rbinom(sample_size, 1, 0.5))
N = sample_size
s = sum(rbinom(sample_size, 1, 0.51))
S = sample_size
dataList_null <- list(n=n, N=N)
dataList_alt <- list(s=s, S=S)
'
# Stan Fit Null
fit_null <- stan(modelFile_null,
data = dataList_null,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
fit_alt <- stan(modelFile_alt,
data = dataList_alt,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
cat("Finishing model simulation")
endTime = Sys.time(); print(endTime)
print("It took", endTime - startTime)
'
model_1   <- stan_model(modelFile_null)
fit_1   <- sampling(object = model_1, data = dataList_null, control = list(adapt_delta = 0.99))
marglik_1 <- bridge_sampler(fit_2)
model_2   <- stan_model(modelFile_alt)
fit_2     <- sampling(object = model_2, data = dataList_alt, control = list(adapt_delta = 0.99))
marglik_2 <- bridge_sampler(fit_2)
'
bridge_H0 <- bridge_sampler(fit_null)
bridge_H1 <- bridge_sampler(fit_alt)
print(bf(bridge_H0, bridge_H1))
'
cat('bayes factor', exp(marglik_2$logml - marglik_1$logml))
library(rstan)
library(bridgesampling)
rstan_options(auto_write=TRUE)
options(mc.cores=4)
modelFile_null <- 'stan_null.stan'
modelFile_alt <- 'stan_alt.stan'
nIter <- 2000
nChains <- 4
nWarmup <- floor(nIter/2)
nThin <- 1
sample_size = 100000
n = sum(rbinom(sample_size, 1, 0.5))
N = sample_size
s = sum(rbinom(sample_size, 1, 0.51))
S = sample_size
dataList_null <- list(n=n, N=N)
dataList_alt <- list(s=s, S=S)
model_1   <- stan_model(modelFile_null)
setwd("/mnt/CA5096D35096C61B/Users/kalee/Desktop/Bachelor's Thesis/R Programming/stan_models")
fit_1   <- sampling(object = model_1, data = dataList_null, control = list(adapt_delta = 0.99))
marglik_1 <- bridge_sampler(fit_2)
model_1   <- stan_model(modelFile_null)
fit_1   <- sampling(object = model_1, data = dataList_null, control = list(adapt_delta = 0.99))
model_1   <- stan_model(modelFile_null)
marglik_1 <- bridge_sampler(fit_1)
model_2   <- stan_model(modelFile_alt)
fit_2     <- sampling(object = model_2, data = dataList_alt, control = list(adapt_delta = 0.99))
marglik_2 <- bridge_sampler(fit_2)
cat('bayes factor', exp(marglik_2$logml - marglik_1$logml))
# Author: Kaleem Ullah
# Simulated Data
library(rstan)
library(bridgesampling)
rstan_options(auto_write=TRUE)
options(mc.cores=4)
modelFile_null <- 'stan_null.stan'
modelFile_alt <- 'stan_alt.stan'
nIter <- 2000
nChains <- 4
nWarmup <- floor(nIter/2)
nThin <- 1
sample_size = 100000
cat("Estimating", modelFile, "model...\n")
startTime = Sys.time(); print(startTime)
cat("Calling", nChains, "simulation in Stan...\n")
n = sum(rbinom(sample_size, 1, 0.5))
N = sample_size
s = sum(rbinom(sample_size, 1, 0.51))
S = sample_size
dataList_null <- list(n=n, N=N)
dataList_alt <- list(s=s, S=S)
# Stan Fit Null
fit_null <- stan(modelFile_null,
data = dataList_null,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
fit_alt <- stan(modelFile_alt,
data = dataList_alt,
chains = nChains,
iter = nIter,
thin = nThin,
init = "random",
seed = 12560081)
cat("Finishing model simulation")
endTime = Sys.time(); print(endTime)
print('It took', endTime - startTime)
'
model_1   <- stan_model(modelFile_null)
fit_1   <- sampling(object = model_2, data = dataList_null, control = list(adapt_delta = 0.99))
marglik_1 <- bridge_sampler(fit_2)
model_2   <- stan_model(modelFile_alt)
fit_2     <- sampling(object = model_2, data = dataList_alt, control = list(adapt_delta = 0.99))
marglik_2 <- bridge_sampler(fit_2)
cat("bayes factor", exp(marglik_2$logml - marglik_1$logml)
'
bridge_H0 <- bridge_sampler(fit_null)
bridge_H1 <- bridge_sampler(fit_alt)
print(bf(bridge_H0, bridge_H1))
HT.to.SN = function(dat) {
dat.init = append(1, dat) # assumes heads-up start
SN.dat = ifelse(dat == dat.init[-100001], 1, 0)
return(SN.dat)
}
data = rbinom(sample_size, 1, 0.5)
HT.to.SN(data)
data_same = HT.to.SN(data)
sum(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.5)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.51)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.51)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.51)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.51)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.60)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.60)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.60)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.60)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.75)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.75)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.75)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.75)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
data = rbinom(sample_size, 1, 0.75)
sum(data)
data_same = HT.to.SN(data)
sum(data_same)
range(0, 1, 0.1)
0.1:1
seq(0, 1,0.1)
for (i in seq(0, 1, 0.01)){
data = rbinom(sample_size, 1, 0.75)
data_same = HT.to.SN(data)
diff[i] = sum(data) - sum(data_same)
}
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.01)){
data = rbinom(sample_size, 1, 0.75)
data_same = HT.to.SN(data)
diff[j] = sum(data) - sum(data_same)
j = j + 1
}
diff
seq(0, 1, 0.01)
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.01)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data)
diff[j] = sum(data) - sum(data_same)
j = j + 1
}
diff
hist(diff)
scatter(diff)
plot(diff)
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data)
diff[j] = sum(data) - sum(data_same)
j = j + 1
}
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data)
diff[j] = sum(data) - sum(data_same)
j = j + 1
}
plot(diff)
y = seq(0, 1, 0.001)
plot(diff, y)
plot(y, diff)
diff[j] = (sum(data) - sum(data_same))/100000
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data)
diff[j] = (sum(data) - sum(data_same))/100000
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, diff)
diff = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data)
diff[j] = (sum(data_same))/100000
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, diff)
# with no bias
data_no_bias = rbinom(1000000, 1, 0.5)
data_same_no_bias = HT.to.SN(data_no_bias)
sum(data_no_bias)
sum(data_same_no_bias)
# with no bias
data_no_bias = rbinom(1000000, 1, 0.5)
data_same_no_bias = HT.to.SN(data_no_bias)
sum(data_no_bias)
sum(data_same_no_bias)
# with no bias
data_no_bias = rbinom(1000000, 1, 0.5)
sum(data_no_bias)
data_same_no_bias = HT.to.SN(data_no_bias)
sum(data_same_no_bias)
# with no bias
data_no_bias = rbinom(1000000, 1, 0.5)
data_no_bias
HT.to.SN = function(dat, sample) {
dat.init = append(1, dat) # assumes heads-up start
SN.dat = ifelse(dat == dat.init[-(sample+1)], 1, 0)
return(SN.dat)
}
# with no bias
data_no_bias = rbinom(1000000, 1, 0.5)
data_same_no_bias = HT.to.SN(data_no_bias, 1000000)
sum(data_no_bias)
sum(data_same_no_bias)
# with no bias
data_no_bias = rbinom(10000000, 1, 0.5)
data_same_no_bias = HT.to.SN(data_no_bias, 10000000)
sum(data_no_bias)
sum(data_same_no_bias)
mean = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data, 1000000)
mean[j] = (sum(data_same))/1000000
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, diff)
plot(y, mean)
# with the mean
mean = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data, 1000000)
mean[j] = (sum(data_same))/1000000
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, mean)
# with the mean
mean = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(1000000, 1, i)
data_same = HT.to.SN(data, 1000000)
mean[j] = (sum(data_same))/1000000
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, mean)
# with the mean
sample_size = 1000000
mean = numeric(0)
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same))/sample_size
j = j + 1
}
y = seq(0, 1, 0.001)
plot(y, mean)
# with no bias
data_no_bias = rbinom(10000000, 1, 0.51)
data_same_no_bias = HT.to.SN(data_no_bias, 10000000)
sum(data_no_bias)
sum(data_same_no_bias)
sample_size = 20
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same))/sample_size
j = j + 1
}
plot(y, mean)
mean = numeric(0)
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data = rbinom(sample_size, 1, i)
data_same = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same))/sample_size
j = j + 1
}
plot(y, mean)
data
mean = numeric(0)
data = numeric(0)
data_same = numeric(0)
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data[j] = rbinom(sample_size, 1, i)
data_same[j] = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same[j]))/sample_size
j = j + 1
}
data
mean = numeric(0)
data = c()
data_same = c()
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data[j] = rbinom(sample_size, 1, i)
data_same[j] = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same[j]))/sample_size
j = j + 1
}
data
plot(y, mean)
y = seq(0, 1, 0.001)
mean = numeric(0)
data = c()
data_same = c()
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data[j] = rbinom(sample_size, 1, i)
data_same[j] = HT.to.SN(data, sample_size)
mean[j] = (sum(data_same[j]))/sample_size
j = j + 1
}
data
plot(y, mean)
data
data_same
mean = numeric(0)
data = data.frame()
data_same = data.frame()
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data[j] = rbinom(sample_size, 1, i)
data_same[j] = HT.to.SN(data[j], sample_size)
mean[j] = (sum(data_same[j]))/sample_size
j = j + 1
}
data = data.frame()
data[i] = 4
data[1] = 4
mean = numeric(0)
data = c()
data_same = c()
sample_size = 20
j = 1
for (i in seq(0, 1, 0.001)){
data[j] = rbinom(sample_size, 1, i)
data_same[j] = HT.to.SN(data[j], sample_size)
mean[j] = (sum(data_same[j]))/sample_size
j = j + 1
}
data
data_same
